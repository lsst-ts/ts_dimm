.. _Developer_Guide:

####################
DIMM Developer Guide
####################

The CSC is a standard configurable salobj CSC.
The CSC supports several types of DIMM hardware, including

    - SOAR
    - Astelco

The communication with the Astelco DIMM hardware is written in Python using OpenTPL (Open Transfer Protocol Language).

.. _Dependencies:

Dependencies
============

These are the dependencies for the latest version of ts_dimm:

* ts_xml - v9.1
* `SAL <https://ts-sal.lsst.io>`_ - v5.1.1
* ts_salobj - v6.5
* ts_idl - v3.2

.. _API:

DIMM API
========

The content in this section is autogenerated from docstrings.

.. automodapi:: lsst.ts.dimm
    :no-main-docstr:
    :no-inheritance-diagram:


.. _Build:

Build and Test
==============

Assuming that the ``develop-env`` docker container is running.

.. prompt:: bash

    cd develop/ts_dimm
    setup -kr .
    scons

An alternative

.. prompt:: bash

    cd develop/ts_dimm
    pip install -e .[dev]
    pre-commit install # install black hook
    pytest --cov lsst.ts.dimm -ra

.. _Usage:

Usage
=====

The CSC is started using the following python script located in the ``bin`` directory.

.. prompt:: bash

    python dimm_csc.py

.. _Simulator:

Simulator
=========

A simulator for DIMM is available.
It is intended to be used for testing purposes.

.. _Firmware:

Updating Firmware of the DIMM
=============================

The firmware of DIMM is not a part of this project.
The OpenTPL and Astelco user documentation for DIMM are not available online but can be made available in PDF format upon request.


.. _Documentation:

Building the Documentation
==========================

.. prompt:: bash

    package-docs clean && package-docs build

.. _Contributing:

Contributing
============

Code and documentation contributions utilize pull-requests on github.
Feature requests can be made by filing a Jira ticket with the `ts_dimm` label.
In all cases, reaching out to the :ref:`contacts for this CSC <ts_xml:index:master-csc-table:DIMM>` is recommended.

